{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Digammaâ€‘ep Tutorial\n",
    "\n",
    "Welcome to the **Digammaâ€‘ep v0.1.6** tutorial! ðŸŽ‰\n",
    "\n",
    "This notebook introduces the symbolic audit framework for model divergence and integrity.\n",
    "\n",
    "Youâ€™ll learn:\n",
    "- How to install and import the library\n",
    "- The meaning of each metric (phi, delta_phi, phi_star, drift, curvature)\n",
    "- How to apply them to functions\n",
    "- How to visualize divergence and curvature\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install digamma-ep==0.1.6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Import the library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from epe_maria import phi, delta_phi, phi_star, drift, curvature\n",
    "import math, numpy as np, matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Define sample functions\n",
    "Weâ€™ll compare a quadratic and a linear function, and also examine sine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = lambda x: x**2\n",
    "g = lambda x: x + 1\n",
    "h = lambda x: math.sin(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Compute metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"phi(f,g):\", phi(f, g))\n",
    "print(\"delta_phi(f,g):\", delta_phi(f, g))\n",
    "print(\"phi_star(f,g):\", phi_star(f, g))\n",
    "print(\"drift(f,g):\", drift(f, g))\n",
    "print(\"curvature(f):\", curvature(f))\n",
    "print(\"curvature(sin):\", curvature(h))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Visualize divergence\n",
    "Plotting helps us see why the metrics take the values they do."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.linspace(-5, 5, 200)\n",
    "F = [f(x) for x in X]\n",
    "G = [g(x) for x in X]\n",
    "\n",
    "plt.plot(X, F, label=\"f(x)=x^2\")\n",
    "plt.plot(X, G, label=\"g(x)=x+1\")\n",
    "plt.legend()\n",
    "plt.title(\"Structural Divergence Example\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Explore curvature\n",
    "We can also visualize the second derivative to understand curvature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d2f = [2 for _ in X]  # second derivative of x^2 is constant 2\n",
    "d2h = [ -math.sin(x) for x in X ]  # second derivative of sin(x)\n",
    "\n",
    "plt.plot(X, d2f, label=\"f''(x)=2\")\n",
    "plt.plot(X, d2h, label=\"h''(x)=-sin(x)\")\n",
    "plt.legend()\n",
    "plt.title(\"Curvature Comparison\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## âœ… Summary\n",
    "- **phi**: average output difference\n",
    "- **delta_phi**: slope difference\n",
    "- **phi_star**: blended metric\n",
    "- **drift**: directional bias\n",
    "- **curvature**: average bendiness\n",
    "\n",
    "You can now apply these metrics to your own functions, model outputs, or symbolic experiments!"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "digamma_ep_tutorial.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
